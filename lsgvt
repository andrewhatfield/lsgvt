#!/bin/python
#
#  lsgvt
#  
#  Copyright 2012 Fred van Zwieten <fvzwieten@vxcompany.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#  This program shows a pretty graphical representation of a Gluster
#  volume's topology. It uses the fuse-<volname>.vol file for it's
#  source. If you do not give any parameters, it shows the topology
#  for all the volumes. Otherwise it will show the topology for the
#  given space-separated list of volume names.
#
#  For the location of the input files, it uses '/var/lib/glusterd/vols'.
#  If your distribution has another location, this should be changed in
#  variable 'volpath'

import sys, os

# set up variables
volpath = '/var/lib/glusterd/vols' 	# change if necessary
vols = sys.argv[1:]         		# command line arguments
err = 0                     		# error boolean for deferred error handling
gv = u'\u2502'              		# graphical vertical dash
gc = u'\u2514'              		# graphical corner
gh = u'\u2500'              		# graphical horizontal dash
gj = u'\u251c'              		# graphical junction
pad = '  '                  		# padding between levels


# if no arguments, use all volumes
if not vols:
    vols = os.listdir(volpath)

# check if volumes exist
for vol in vols:
    if not os.path.isfile(volpath + '/' + vol + '/' + vol + '-fuse.vol'):
        print vol + ' is not a volume'
        err = 1

# if there is at least one wrong volume -> exit
if err:
    sys.exit(1)

# if there are no volumes -> exit
if not vols:
    print 'No volumes present'
    sys.exit(1)

# show topology for each volume

for vol in vols:
    # read vol file
    with open(volpath + '/' + vol + '/' + vol + '-fuse.vol') as f:
        lines = f.read().split('\n')
    f.close()

    # parse vol file
    clients, replicas, stripes, dhts = [],[],[],[]
    types = ['client','replicate','stripe','dht']
    for line in lines:
        words = line.split()
        if words:
            if words[0] == 'volume':
                if len(words) < 2: continue
                if not words[1].find('-'): continue
                parts = words[1].split('-')
                if len(parts) == 1: continue
                voltype = parts[1]
                if voltype not in types: continue
                if voltype != 'dht':
                    volseqnr = int(parts[2])
            if voltype == 'client':
                if words[0] == 'option' and words[1][:6] == 'remote':
                    while len(clients) < volseqnr+1: clients.append({})
                    clients[volseqnr][words[1]] = words[2]
            if voltype == 'replicate':
                if words[0] == 'subvolumes':
                    replicas.append([volseqnr,[int(word.split('-')[2]) for word in words[1:]]])
            if voltype == 'stripe':
                if words[0] == 'subvolumes':
                    stripes.append([volseqnr,[int(word.split('-')[2]) for word in words[1:]]])
            if voltype == 'dht':
                if words[0] == 'subvolumes':
                    dhts = [int(word.split('-')[2]) for word in words[1:]]

    # pretty print volume structure
    levels = 1
    if stripes: levels += 1
    if replicas: levels += 1

    print '\nTopology for volume ' + vol + ':'

    # distributed only
    if levels == 1:
        for dht_idx, dht in enumerate(dhts):
            gl = gc if len(dhts) == dht_idx + 1 else gj
            print pad + gv
            print pad + gl + gh + gh + ' Brick ' + str(dht) + ': ' + clients[dht]['remote-host'] + ':' + clients[dht]['remote-subvolume']

    # striped or replicated only
    if levels == 2:
        if stripes:
            voltype = 'Stripe'
            voldata = stripes
        else:
            voltype = 'Replica'
            voldata = replicas
        for dht_idx, dht in enumerate(dhts):
            dht_dash = ' ' if len(dhts) == dht_idx + 1 else gv
            gl = gc if len(dhts) == dht_idx + 1 else gj
            print pad + gv
            print pad + gl + gh + gh + ' ' + voltype + ' set ' + str(dht)
            for item_idx, item in enumerate(voldata[dht][1]):
                gl = gc if len(voldata[dht][1]) == item_idx + 1 else gj
                print pad + dht_dash + pad + pad + gv
                print pad + dht_dash + pad + pad + gl + gh +gh + ' Brick ' + str(item) + ': ' + clients[item]['remote-host'] + ':' + clients[item]['remote-subvolume']

    # distributed, striped and replicated
    if levels == 3:
        for dht_idx, dht in enumerate(dhts):
            dht_dash = ' ' if len(dhts) == dht_idx + 1 else gv
            gl = gc if len(dhts) == dht_idx + 1 else gj
            print pad + gv
            print pad + gl + gh +gh + ' Stripe set ' + str(dht)
            for stripe_idx, stripe in enumerate(stripes[dht][1]):
                stripe_dash = ' ' if len(stripes[dht][1]) == stripe_idx + 1 else gv
                gl = gc if len(stripes[dht][1]) == stripe_idx + 1 else gj
                print pad + dht_dash + pad + pad + gv
                print pad + dht_dash + pad + pad + gl + gh +gh + ' Replica set ' + str(stripe)
                for replica_idx, replica in enumerate(replicas[stripe][1]):
                    gl = gc if len(replicas[dht][1]) == replica_idx + 1 else gj
                    print pad + dht_dash + pad + pad + stripe_dash + pad + pad + gv
                    print pad + dht_dash + pad + pad + stripe_dash + pad + pad + gl + gh +gh + ' Brick ' + str(replica) + ': ' + clients[replica]['remote-host'] + ':' + clients[replica]['remote-subvolume']

    # print whiteline @ the end
    print

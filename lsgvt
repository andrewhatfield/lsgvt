#!/usr/bin/python
#
#  lsgvt
#  
#  Copyright 2012 Fred van Zwieten <fvzwieten@vxcompany.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#  This program shows a pretty graphical representation of a Gluster
#  volume's topology. It uses the fuse-<volname>.vol file for it's
#  source. If you do not give any parameters, it shows the topology
#  for all the volumes. Otherwise it will show the topology for the
#  given space-separated list of volume names.
#
#  Use lsgvt -h for help

import sys, os, optparse

class Xlator:
    def __init__(self):
        self.volname = ''
        self.type = ''
        self.subvolumes = []
        self.parent = None
        self.options = {}

    def get_description(self):
        s = '%s' % self.type
        if self.parent and self in self.parent.subvolumes:
            s += ' %d' % self.parent.subvolumes.index(self)
        if self.type == 'Brick':
            s += ': %s:%s' % (self.options['remote-host'], self.options['remote-subvolume'])
        return s

    def format_tree(self, prefix=[], last_subvol=False):
        s = ''
        if prefix and last_subvol:
            # print a nice corner (like an 'L')
            s += '%s %s\n' % (''.join(prefix[0:-1] + [' %s%s%s' % (gc, gh, gh)]), self.get_description())
        elif prefix:
            # print a junction (a 'T' turned 90 degrees anti-clockwise)
            s += '%s %s\n' % (''.join(prefix[0:-1] + [' %s%s%s' % (gj, gh, gh)]), self.get_description())
        else:
            # this is the top of the tree, there is no prefix
            s += self.get_description() + '\n'

        for subvol in self.subvolumes:
            # add an extra line for spacing and readability
            s += ''.join(prefix + [' %s     ' % gv]) + '\n'
            if self.subvolumes.index(subvol) < (len(self.subvolumes) - 1):
                # not the last subvolume, prefix a vertical line
                s += subvol.format_tree(prefix + [' %s     ' % gv], False)
            else:
                # last subvolume, prefix only empty spaces
                s += subvol.format_tree(prefix + ['       '], True)

        return s


#  parse command line options and arguments

parser = optparse.OptionParser(version='%prog version 0.2', usage='%prog [options] [volname..]',description='This program lists the topology of Gluster volumes')

parser.add_option('-s', '--spacing', help='The spacing between the leaves, defaults to 1', dest='spacing', type=int, default=1)
parser.add_option('-w', '--width', help='The width of the leaves, defaults to 2', dest='width', type=int, default=2) 
parser.add_option('-p', '--path', help='Path to source file, defaults to /var/lib/glusterd/vols', dest='volpath', default='/var/lib/glusterd/vols')
parser.add_option('-a', '--ascii', help='Use ascii characters to draw lines instead of unicode', dest='ascii', default=False, action='store_true')

(opt, vols) = parser.parse_args()

# set up variables
err = 0                     		    # error boolean for deferred error handling
gv = '|' if opt.ascii else u'\u2502'    # graphical vertical dash
gc = '+' if opt.ascii else u'\u2514'    # graphical corner
gh = '-' if opt.ascii else u'\u2500'    # graphical horizontal dash
gj = '+' if opt.ascii else u'\u251c'    # graphical junction
sp = ' '                                # space
pad = sp * opt.width             	    # padding between levels
gh = gh * opt.width                     # length of horizontal line


# check is volpath exists
if not os.path.isdir(opt.volpath):
	print 'Directory ' + opt.volpath + ' does not exist, is Gluster installed?'
	sys.exit(1)

# if no arguments, use all volumes
if not vols:
    vols = os.listdir(opt.volpath)

# check if volumes exist
for vol in vols:
    if not os.path.isfile(opt.volpath + '/' + vol + '/' + vol + '-fuse.vol'):
        print vol + ' is not a volume'
        err = 1

# if there is at least one wrong volume -> exit
if err:
    sys.exit(1)

# if there are no volumes -> exit
if not vols:
    print 'No volumes present'
    sys.exit(1)

# show topology for each volume

for vol in vols:
    # read vol file
    with open(opt.volpath + '/' + vol + '/' + vol + '-fuse.vol') as f:
        lines = f.read().split('\n')
    f.close()

    # parse vol file
    types = {'cluster/distribute' : 'Distribute set',
             'cluster/stripe' : 'Stripe set',
             'cluster/replicate' : 'Replica set',
             'protocol/client' : 'Brick'}
    stack = []
    xl = None
    for line in lines:
        words = line.split()
        if not words: continue
        if words[0] == 'volume':
            xl = Xlator()
            xl.volname = words[1]
        elif words[0] == 'type':
            if words[1] in types.keys():
                xl.type = types[words[1]]
            else:
                xl.type = words[1]
        elif words[0] == 'option':
            xl.options[words[1]] = words[2]
        elif words[0] == 'subvolumes':
            xl.subvolumes = words[1:]
        elif words[0] == 'end-volume':
            # only keep xlators that describe the volume layout
            if xl.type in types.values():
                stack.append(xl)
            xl = None

    # replace the subvolumes 'volname' by the xlator object
    for xl in stack:
        xl.subvolumes = [_xl for _xl in stack if _xl.volname in xl.subvolumes]
        for subvol in xl.subvolumes:
            subvol.parent = xl

    # find the main volume xlator (the one without parent)
    for xl in stack:
        if xl.parent is None:
            break

    # pretty print the topology
    print '\nTopology for volume ' + vol + ':\n'
    print xl.format_tree()

    # print whiteline @ the end
    print

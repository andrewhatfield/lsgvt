#!/usr/bin/python
#
#  lsgvt
#  
#  Copyright 2012 Fred van Zwieten <fvzwieten@vxcompany.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#  This program shows a pretty graphical representation of a Gluster
#  volume's topology. It uses the fuse-<volname>.vol file for it's
#  source. If you do not give any parameters, it shows the topology
#  for all the volumes. Otherwise it will show the topology for the
#  given space-separated list of volume names.
#
#  For the location of the input files, it uses '/var/lib/glusterd/vols'.
#  If your distribution has another location, this should be changed in
#  variable 'volpath'

import sys, os

# set up variables
volpath = '/var/lib/glusterd/vols' 	# change if necessary
vols = sys.argv[1:]         		# command line arguments
err = 0                     		# error boolean for deferred error handling
gv = u'\u2502'              		# graphical vertical dash
gc = u'\u2514'              		# graphical corner
gh = u'\u2500'              		# graphical horizontal dash
gj = u'\u251c'              		# graphical junction
sp = ' '                            # space
pad = sp*2                  		# padding between levels


# check is volpath exists
if not os.path.isdir(volpath):
	print 'Directory ' + volpath + ' does not exist, is Gluster installed?'
	sys.exit(1)

# if no arguments, use all volumes
if not vols:
    vols = os.listdir(volpath)

# check if volumes exist
for vol in vols:
    if not os.path.isfile(volpath + '/' + vol + '/' + vol + '-fuse.vol'):
        print vol + ' is not a volume'
        err = 1

# if there is at least one wrong volume -> exit
if err:
    sys.exit(1)

# if there are no volumes -> exit
if not vols:
    print 'No volumes present'
    sys.exit(1)

# show topology for each volume

for vol in vols:
    # read vol file
    with open(volpath + '/' + vol + '/' + vol + '-fuse.vol') as f:
        lines = f.read().split('\n')
    f.close()

    # parse vol file
    levels = [['Distribution set '],['Stripe set '],['Replica set '],['Brick ']]
    types = ['dht','stripe','replicate','client']
    brick = {}
    for line in lines:
        words = line.split()
        if not words: continue
        if words[0] == 'volume':
            if len(words) < 2: continue
            if not words[1].find('-'): continue
            parts = words[1].split('-')
            if len(parts) == 1: continue
            voltype = parts[1]
            if voltype in types:
                volseqnr = 0 if voltype == 'dht' else int(parts[2])
        if voltype not in types: continue
        if words[0] == 'option' and words[1][:6] == 'remote':
            brick[words[1]] = words[2]
            if len(brick) == 2:
                levels[types.index(voltype)].append([volseqnr,brick])
                brick = {}
        if words[0] == 'subvolumes':
            levels[types.index(voltype)].append([volseqnr,[int(word.split('-')[2]) for word in words[1:]]])

    # remove empty levels
    for level in reversed(levels):
        if len(level) == 1: levels.remove(level)

    # pretty print the topology
    print '\nTopology for volume ' + vol + ':\n'

    print str(levels[0][0]) + str(levels[0][1][0])
    for l2_idx,l2 in enumerate(levels[0][1][1]):
        (g2v,gl) = (sp,gc) if len(levels[0][1][1]) == l2_idx + 1 else (gv,gj)
        print pad + gv
        line = pad + gl + gh + levels[1][0] + str(levels[1][l2+1][0])
        if len(levels) == 2: line = line + ': ' + str(levels[1][l2+1][1]['remote-host']) + ':'  + str(levels[1][l2+1][1]['remote-subvolume'])
        print line
        if len(levels) > 2:
            for l3_idx,l3 in enumerate(levels[1][l2+1][1]):
                (g3v,gl) = (sp,gc) if len(levels[1][l2+1][1]) == l3_idx + 1 else (gv,gj)
                print pad + g2v + pad + gv
                line = pad + g2v + pad + gl + gh + levels[2][0] + str(levels[2][l3+1][0])
                if len(levels) == 3: line = line + ': ' + str(levels[2][l3+1][1]['remote-host']) + ':' + str(levels[2][l3+1][1]['remote-subvolume'])
                print line
                if len(levels) > 3:
                    for l4_idx,l4 in enumerate(levels[2][l3+1][1]):
                        gl = gc if len(levels[2][l3+1][1]) == l4_idx + 1 else gj
                        print pad + g2v + pad + g3v + pad + gv
                        line = pad + g2v + pad + g3v + pad + gl + gh + levels[3][0]
                        line = line + str(levels[3][l4+1][0]) + ': ' + str(levels[3][l4+1][1]['remote-host']) + ':' + str(levels[3][l4+1][1]['remote-subvolume'])
                        print line

    # print whiteline @ the end
    print
